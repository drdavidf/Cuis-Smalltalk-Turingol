tokens

 : { } ; , . \" tape to alphabet is print accept reject go to if symbol then move left right one square

patterns

"//[^[:cntrl:]]*$"					{ nextTerminal }
[[:space:]]+					{ nextTerminal } 
"[0-9A-Za-z_#=+*-]+"					identifier
"\$[a-z]+"					variable

rules

%topic Start

Program 'program' : Definition 'def' List 'list' . 
 
	%aspect labels

	{ labels@program = (label@list) asDictionary } 

	%aspect transitions

	{ transitions@program = transitions@list }

	%aspect states

	{ generator@program = SequenceGenerator new } 

	{ q0@program = (generator@program) next } 

	{ start@list = q0@program } 

	{ qe@program = follow@list }	

	%aspect definitions

	{ alphabet@program = definitions@def }  

	{ procedures@program = (procedures@def) asDictionary }

	;

%topic Statements

Statement 's1' : Identifier 'identifier' ":" Statement 's2' 

	%aspect labels

	{ label@s1 = { (text@identifier) -> (start@s1) } , (label@s2) }

	%aspect states

	{ start@s2 = start@s1 } 

	{ follow@s1 = follow@s2 } 

	;

Direction 'direction' : 

	left { d@direction = -1 } { text@direction = 'left' } 

	| 

	right { d@direction = 1 } { text@direction = 'right' } ;

Statement 's1' : if tape symbol is Expression 'expr' then Statement 's2' 

	%aspect transitions

	{ transitions@s1 = ((alphabet@s1) reject:[:each | each = (value@expr) ] thenCollect:[:each | { start@s1 . each } -> { each . 0 .  (follow@s2) } ]) , { { start@s1 . (value@expr) } -> { (value@expr) . 0 . (start@s2) } } , (transitions@s2) }

	%aspect states

	{ start@s2 = (generator@s1) next } 

	{ follow@s1 = follow@s2 } 

	{ states@s1 = { start@s2 } , (states@s2) } 

;

Statement 'statement' : go to Identifier 'identifier' 

	%aspect transitions

	{ transitions@statement = (alphabet@statement) collect:[:each | { (start@statement) . each } -> { each . 0 . ( (labels@statement) at: (text@identifier) ) } ] } 

	%aspect states 

	{ follow@statement = (generator@statement) next }

	{ states@statement = { follow@statement } }

	;

Statement 'statement' : move Direction 'direction' one square 

	%aspect transitions

	{ transitions@statement = (alphabet@statement) collect:[:each | { (start@statement) . each } -> { each . (d@direction) . (follow@statement) }  ] } 

	%aspect states 

	{ follow@statement = (generator@statement) next }

	{ states@statement = { follow@statement } }

	;

Statement 'statement' : print Expression 'expr' 

	%aspect transitions

	{ transitions@statement = (alphabet@statement) collect:[:each | { (start@statement) . each } -> { (value@expr) . 0 . (follow@statement) } ] }

	%aspect states 

	{ follow@statement = (generator@statement) next } 

	{ states@statement = { follow@statement } } 
;

Statement 'statement' : accept 

	%aspect transitions

	{ transitions@statement = (alphabet@statement) collect:[:each | { (start@statement) . each } -> { each . 0 . #yes } ] } 

	%aspect states 

	{ follow@statement = (generator@statement) next }

	{ states@statement = { follow@statement } }

	;

Statement 'statement' : reject 

	%aspect transitions

	{ transitions@statement = (alphabet@statement) collect:[:each | { (start@statement) . each } -> { each . 0 . #no } ] } 

	%aspect states 

	{ follow@statement = (generator@statement) next }

	{ states@statement = { follow@statement } }

	;

Statement 'statement' :

	%aspect states 

	{ follow@statement = start@statement } ;

Statement 'statement' : "{" List 'list' "}" 

	%aspect states

	{ start@list = start@statement } 

	{ follow@statement = follow@list } ;

List 'list' : List 'tail' ";" Statement 'statement'
 
	%aspect states

	{ start@tail = start@list } 

	{ start@statement = follow@tail } 

	{ follow@list = follow@statement } 
;

List 'list' : Statement 'statement'

	%aspect states

	{ start@statement = start@list } 

	{ follow@list = follow@statement } 

	;

%topic Messages

Message 'message' : Identifier 'head' MessagePart * 'tail' 

	{ name @ message = text @ head , ( text @ tail fold:[ :x :y | x,y ] ifEmpty:[String new] ) } 

	{ arguments @ message = (arguments @ tail) concatenation } 
;

Message 'message' : move 'move' Direction 'dir' MessagePart + 'tail' 

	{ name @ message = move value asString, (text @ dir) , ( text @ tail fold:[ :x :y | x,y ] ifEmpty:[String new] ) } 

	{ arguments @ message = (arguments @ tail) concatenation } 
;

MessagePart 'part' : Identifier 'name' 

		{ text @ part = text @ name } 

		{ arguments @ part = {} }

	| Expression 'expr' 

		{ text @ part = String new } 

		{ arguments @ expr = { value @ expr } } ;

MessageProtocol 'protocol' : Identifier 'head' MessageProtocolPart * 'tail' 

	{ name @ protocol = text @ head , ( text @ tail fold:[ :x :y | x,y ] ifEmpty:[String new] ) } 

	{ parameters @ protocol = (parameters @ tail) concatenation } 

	;

MessageProtocol 'protocol' : move 'move' Direction 'dir' MessageProtocolPart + 'tail' 

	{ name @ protocol = move value asString, (text @ dir) , ( text @ tail fold:[ :x :y | x,y ] ifEmpty:[String new] ) } 

	{ parameters @ protocol = (parameters @ tail) concatenation } 

	;

MessageProtocolPart 'part' : Identifier 'name' 

		{ text @ part = text @ name } 

		{ parameters @ part = {} }

	| variable 'var'

		{ text @ part = String new } 

		{ parameters @ part = { var value asString } } ;

%topic Procedures



Block 'block' : List 'list' 

	%aspect labels

	{ labels@block = (label@list) asDictionary }

	%aspect transitions

	{ transitions@block = transitions @ list }

	%aspect states 

	{ follow@block = follow@list }

;
	
Statement 'statement' : Message 'message'

	%aspect transitions

	{ transitions@statement = (result @ statement) first at: #transitions }

	%aspect states  

	{ follow@statement = (result @ statement) first at: #follow }

	%aspect procedure-calls

	{ result @ statement = { (procedures @ statement at: name @ message ifAbsent:[ MissingDefinition new message: message ; signal ]) applyTo: arguments @ message procedures: procedures @ statement start: start @ statement generator: generator @ statement } }

;

Procedure 'procedure' : to MessageProtocol 'protocol' "{" Block [[ block ]] "}" 

	%aspect definitions

	{ definitions @ procedure = name @ protocol -> (TuringolProcedure new alphabet: alphabet@procedure; parameters: parameters @ protocol; statements: block ; yourself)  } 

;

%topic Definitions

Definition 'definition' : Symbols 'symbols' ";" 

	%aspect definitions 
 
	{ definitions@definition = definitions@symbols } 

	{ procedures@definition = {} asDictionary }; 

Definition 'definition' : Symbols 'symbols' ";" Procedure + 'procs' ";" 

	%aspect definitions 
 
	{ definitions@definition = definitions@symbols } 

	{ procedures@definition = definitions@procs }; 

Symbols 'symbols' : tape alphabet is Identifier 'identifier'

	%aspect definitions  

	{ definitions@symbols = { text@identifier }  }

	;

Symbols 'symbols' : Symbols 'tail' , Identifier 'identifier'

	%aspect definitions 

	{ definitions@symbols = definitions@tail , { text@identifier } } ;

Identifier 'symbol' : identifier 'token' 

	%aspect definitions 

		{ text@symbol = token value asString } ;

Identifier 'symbol': one 'token'  

	%aspect definitions 

		{ text@symbol = token name } ;


%topic Expressions

Expression 'expr' : \" Identifier 'literal' \" 

		{ value@expr = text@literal }

	| variable 'v'

		{ value@expr = env @ expr at: v value asString ifAbsent:[MissingDefinition new message: v ; signal] }

	;